{
  
    
        "post0": {
            "title": "虚谷号快速入门",
            "content": "虚谷号快速入门（V1.2） . 文档撰写 谢作如 . 当你拿到一块全新的虚谷号，不要急着找显示器，接鼠标和键盘。只需要一条USB线，我们就可以使用U盘、无线等模式进行编程。即插即用、快速上手，这是虚谷号的追求。只有这样，虚谷号才算得上一块为中小学教学量身定做的开源硬件。 . 1. 虚谷号能做什么？ . 虚谷号的用户群体是高年级的学生，是学生熟悉了掌控板、Arduino或者micro:bit等开源硬件之后，希望进一步学习而选择的开源硬件。因此，在创客教育方面有“掌控生虚谷”的说法。 . 掌控板和Arduino都是属于单片机，功能和算力都有限，做不了太复杂的工作，比如Arduino、micro:bit连上网都做不到，更不要说体验或者学习人工智能了。虽然借助于一些类似AI摄像头的扩展模块，Arduino也能做一些智能识别的工作，那毕竟很有限。虚谷号则定位在物联网、人工智能这两个方面，使用标准的Python语言来控制硬件，和高中新教材完全一致。 . 一般来说，虚谷号的用途可以分为三大部分： . Python编程：学习Python要装太多的库，借助虚谷号可以不用装任何软件，利用浏览器就能学习。 . | 人工智能体验和编程：虚谷号内置了百度AI开放平台和OpenCV之类AI相关库，可以实现很多人工智能的应用，打开内置的学习笔记，既可以运行体验，也能修改代码在线编程。 . | 物联网和智能家居：作为“虚谷物联”项目的最重要组成部分，虚谷号内置了SIoT服务器和必要的库，加上GPIO功能，做物联网数据采集和远程控制非常方便。 . | . 2. 推荐学习路径 . 不同用户，学习虚谷号的路径是不同的。 . 1）已经有树莓派之类的学习经验的用户。 . 可以直接使用主机模式（电脑模式），用Python代码控制GPIO非常方便。周边扩展和Arduino完全兼容。 . 2）有Arduino、掌控板编程经验的用户。 . 建议使用U盘模式和无线模式。你会发现，掌控板的MicroPython语法和虚谷号完全一致，掌控板不容易做的摄像头识别、网络爬虫等任务，虚谷号可以轻松驾驭。 . 3）零基础用户。 . 建议使用无线模式，直接从代码编程开始。因为如果是高年级的学生，完全可以跳过图形化编程这一环节。 . 注意： . 不管是哪一类用户，我们都强烈推荐使用无线模式给虚谷号编程！ . 3. 从设置Wi-Fi开始 . 你需要准备一个无线路由器，让电脑和虚谷号连接同一个Wi-Fi信号，相互之间可以访问。还需要一条USB线，micro usb口的，就是那种随处可见的手机充电线。 . 给虚谷号设置Wi-Fi的基本步骤： . 1）将USB线连至虚谷号的OTG口（请选择正确的USB口）。 . . 2）稍后，系统会将虚谷号识别为一个U盘。 . . 3）打开vvBoard的文件夹，找到vvBoard_config文件。 . . 4）用记事本编辑vvBoard_config文件。 . . 将SSID和SSID_PSD改为你的Wi-Fi账号密码，保存配置文件。 . 5）按下虚谷号的RST键，U盘会暂时消失，等再次出现时，vvBoard的文件夹会出现两个新的快捷方式。 . . 双击“访问Jupyter”，此时浏览器（推荐谷歌浏览器）将打开Jupyter的登录页面，登陆密码为“scope”。在Jupyter的界面下，可以给虚谷号编程、安装软件。 . 注意：如果你的虚谷号接上后不能出现U盘，或者无法连上网络，一般来说是因为USB口提供的电流不够大，请在虚谷号的电源口再接一个2A以上的电源（如充电宝）。 . 4. 开始Python编程 . 打开Jupyter，将看到虚谷号的vvBoardBook文件夹中内置了很多学习笔记。这些笔记既包含了代码又有各种解释文字，可以作为编程课程来使用。 . . 以张路、谢作如编写的《Python快速入门教程》为例，用鼠标选中代码，点击上方的“运行”，在代码的下方即可看到运行效果。 . . 5. 体验人工智能 . 虚谷号内置了百度AI开放平台，可以实现很多人工智能的应用，打开内置的学习笔记，即可体验AI的强大功能。当然，你也可以在线修改代码，观察不同的运行结果。 . . 注：虚谷号中提供了一个公用的百度AI用户，可能会受到百度AI平台“申请次数过多”的限制，建议申请一个百度AI平台用户，然后修改代码中的用户参数。 . 6. 体验物联网和智能家居 . 虚谷号内置了SIoT服务器和SIoT库（基于MQTT协议），加上GPIO功能，做物联网数据采集和远程控制非常方便。 . . 关于虚谷物联的更多内容，请访问：https://github.com/vvlink/SIoT . 7.关于虚谷号的问和答 . 自从虚谷计划启动以来，常常有朋友问关于虚谷号的一些问题。挑几个最常见的来统一回答： . 1）拿到一块全新的虚谷号，开始学习前还要做什么准备？ . 答：一条USB线，一个Wi-Fi信号，你就可以开始学习了。对了，你的电脑还要装谷歌浏览器。无论是安装软件、安装库、升级固件，都不需要外接鼠标键盘和显示器，通过USB线都能解决。为了运行稳定，最好准备一个2A以上的电源。 . 2）虚谷号入门需要多少时间？ . 答：如果有Python基础，那恭喜你，直接入门；如果有Linux基础，那说明早入门了；如果仅仅接触过Arduino、掌控板，那需要花时间熟悉一下开源硬件的代码编程，学习时间是花在学习语言上，不是花在虚谷号上。哪怕从来没有用过虚谷号，在Jupyter课程的支持下，做一个人工智能的简单应用，半小时就可以了。 . 3）虚谷号有教学课程吗？ . 答：虚谷号本来就是一台迷你电脑，任何关于linux、Python、PHP之类的课程，都可以是虚谷号的课程。同时，虚谷号自带了Arduino，绝大多数Arduino的课程，也可以直接用在虚谷号上。当然，虚谷号在教学应用方面做了很多优化，内置了常见的库。部分虚谷号测评专家，写了一些基于Jupyter的学习笔记，可以看成是虚谷号的课程。 . 4）虚谷号适合哪些人使用？ . 答：虚谷号面向高年级学生，尤其是中学生，重点关注Python的代码编程。你可以将虚谷号看成是一台“Linux电脑+Arduino”，用Linux系统处理复杂的信息，用Arduino来获取传感器信息和控制各种执行器。在虚谷号的帮助下，无论是物联网还是人工智能作品，都可以快速搭建。 . 5）相对于树莓派，虚谷号的优势在哪里？ . 虚谷号和树莓派一样，都是迷你电脑。但是虚谷号类似于Arduino和掌控板，接上电脑的USB口就能编程。这样一来，在机房中学习开源硬件就变得特别简单、方便。而且，虚谷号中内置了常见人工智能框架，学习AI编程特别方便。如果想用大班教学的形式用Python编程学习开源硬件，虚谷号是最好选择，没有之一。 . 6）通过无线模式如何安装软件和支持库？ . 虚谷号的jupyter提供了“终端”功能。通过“新建”-“终端”，可以在Web界面安装软件和支持库。还可以安装远程桌面服务，通过Windows的远程桌面软件即可远程访问。 . 想了解更多，请访问虚谷号官方文档。 . 地址：https://vvboard.readthedocs.io/ . 想购买虚谷号，请通过微信（搜索“虚谷号”），一些创客企业已经开始代理虚谷号，DF商城即将上线。 .",
            "url": "/vvboard/2020/04/15/%E8%99%9A%E8%B0%B7%E5%8F%B7%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html",
            "relUrl": "/2020/04/15/%E8%99%9A%E8%B0%B7%E5%8F%B7%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html",
            "date": " • Apr 15, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "欢迎使用（Jupyter）",
            "content": "&#20320;&#22909; . print(&quot;你好！欢迎使用！&quot;) . 你好！欢迎使用！ .",
            "url": "/vvboard/jupyter/%E4%B8%AD%E6%96%87/%E6%AC%A2%E8%BF%8E/2020/04/14/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8-Jupyter.html",
            "relUrl": "/jupyter/%E4%B8%AD%E6%96%87/%E6%AC%A2%E8%BF%8E/2020/04/14/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8-Jupyter.html",
            "date": " • Apr 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "欢迎使用Jekyll!（Markdown）",
            "content": "Jekyll博客将从这里开始. . 希望你喜欢! .",
            "url": "/vvboard/2020/04/12/%E4%BD%A0%E5%A5%BD.html",
            "relUrl": "/2020/04/12/%E4%BD%A0%E5%A5%BD.html",
            "date": " • Apr 12, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "虚谷号jupyter入门教程",
            "content": "虚谷号Jupyter入门教程 . 1.1 什么是Jupyter . Jupyter的全称为Jupyter Notebook（此前被称为IPython notebook），是一个交互式笔记本，支持运行40多种编程语言。通过Jupyter，可以通过Web页面在虚谷号上运行Python代码和Linux命令。虚谷号的无线模式主要采用Jupyter来实现。 . Jupyter的本质是一个Web应用程序，便于创建和共享程序文档，支持实时代码，数学方程，可视化和Markdown。很多人喜欢直接在Jupyter上写代码，并同步记录学习心得，这样的学习笔记实际上就是一个很好的教程。 . 1.2 Jupyter快速入 . 1）访问Jupyter . 看到了这个文件，相信你已经打开了虚谷号的Jupyter。请使用谷歌浏览器（或者使用谷歌浏览器内核的浏览器）访问Jupyter。虚谷号的Wi-Fi有记忆功能，一般来说IP地址是不会变化的。当Wi-Fi信息设置好后，只要提供电源和Wi-Fi信号，就能使用Jupyter来访问虚谷号。 . 2）浏览Jupyter笔记 . 虚谷号上提供了很多学习笔记，默认放在“vvBoardbook”文件夹中。通过浏览这些学习笔记，可以快速掌握Python代码，了解虚谷号的基本功能。 . . 这些学习笔记中，有文字、图片还有Python代码。笔记中的代码可以即时编辑，还可以在线执行，并且能够返回运行结果。 . 用鼠标选中代码输入框（jupyter中称为“单元格”），单元格出现蓝色或者绿色边框，表示被选中。在菜单中选择“执行”命令，单元格的下方将出现单元格代码执行效果。执行完毕后，“in [ ]”中的括号将出现一个数字，表示单元格代码运行的次序。 . . 1.3 Jupyter可以做什么 . 1）学习Python编程 . Jupyter被誉为最好用的Python IDE之一，用来调试Python事半功倍。还可以在网页上显示虚谷号的传感器数值、摄像头内容等等。其实Jupyter不仅仅支持Python，还支持多种语言，这需要另外安装插件。 . 通过“新建”-“Python3”，即可新建一个笔记。 . 2）运行Linux命令 . 通过“新建”-“终端”，即可打开Web界面的终端。 . . 在仿真的终端页面，Jupyter几乎支持所有的命令，如安装软件、安装Python库文件、运行Python程序等。当关闭窗口后，再次打开，还能够看到之前的命令运行状态。 . 通过终端页面，还能够看到一共有几个命令窗口在运行。在不同电脑登陆Jupyter，可以共享这一界面，尤其适用于教学。 . 3）管理虚谷号 . Jupyter支持文件的上传和下载，新建文件、文件夹，删除、改名等操作，可以用来管理虚谷号的文件资源，可以安装各种库、软件等等。 . 1.4 Jupyter的代码调试技巧 . 1）如何快速运行指定的代码？ . Jupyter单元格中的代码，可以按照任意次序进行执行。Jupyter提供了多种执行代码的方式，在“单元格”菜单中。分为：运行所有单元格、运行所有、运行上面的代码块、运行下面的代码块等。 . 在调试代码的过程中，稍微复杂些的代码，往往需要全部重启，好查看程序的整体效果。如在测试GPIO的代码时，之前的代码对后面的代码会产生影响，这就需要重启服务。具体的功能在“服务”菜单中。可以选择“重启 &amp; 清空输入”、“重启 &amp; 运行所有” . 2.为什么打开笔记的时候，所有的代码都已经运行了？ . Jupyter笔记会保留代码运行的状态，打开一个笔记往往会看到很多的输出信息。如何让这些信息消失，保持代码的未运行状态？那就需要在关闭笔记前，执行“重启 &amp; 清空输入”，然后保存退出。 . 3.为什么打开多个笔记后Iupyter的运行速度变慢？ . 打开Iupyter的笔记，关闭页面并不能结束程序运行，还会有线程在单独运行，占用虚谷号的内存。当打开较多的程序，直接使用关闭页面的方式来关闭笔记，可能会导致内存不够用而死机。创客版的内存比教育版小，感觉会比较明显。 . 避免这种情况最好方法便是彻底结束程序运行。结束程序的方法如下：1、运行完程序，需要结束则在程序的页面选择“服务”-“关闭”。2、关闭程序的页面，看到程序的目录刚运行的程序呈绿色，并且显示运行，勾选前面的小方框，在选择出现的黄色的关闭选项，即可结束程序的运行。3、点击Jupyter的“运行”，会看到当前在运行的终端和笔记，逐个关闭即可。 . 1.5 如何用Jupyter写笔记 . Jupyter的笔记中既可以插入代码，也可以用MarkDown语法排版的文字。 . MarkDown教程：https://baike.baidu.com/item/markdown/3245829?fr=aladdin . Jupyter支持用“CTRL+C”的形式插入图片。 . 1.6 关于Jupyter的常见问题 . 1）除了虚谷号内置的笔记，还有其他的笔记吗？ . 虚谷号团队在不断编写学习笔记，除此之外，在网上能够找到很多jupyter学习笔记（扩展名为ipynb），如jupyter的官方网站。（https://nbviewer.jupyter.org/）。 . 2）可以多人一起使用Jupyter吗？ . 可以。甚至可以多人共同编辑一个笔记。。 . 3）Jupyter的笔记能不能导出来？ . 当然可以，Jupyter的笔记能够导出很多种格式，如py、pdf、html等等。 . 4）在Jupyter上，如何做交互，比如输入字符之类。 . 不仅可以直接在网页上输入，还能够利用Jupyter的网页小控件，做文本框、选择框等。图片也可以直接显示在网页上。 .",
            "url": "/vvboard/2020/04/10/%E8%99%9A%E8%B0%B7%E5%8F%B7Jupyter%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.html",
            "relUrl": "/2020/04/10/%E8%99%9A%E8%B0%B7%E5%8F%B7Jupyter%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.html",
            "date": " • Apr 10, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "GitHub Actions: Providing Data Scientists With New Superpowers",
            "content": "What Superpowers? . Hi, I’m Hamel Husain. I’m a machine learning engineer at GitHub. Recently, GitHub released a new product called GitHub Actions, which has mostly flown under the radar in the machine learning and data science community as just another continuous integration tool. . Recently, I’ve been able to use GitHub Actions to build some very unique tools for Data Scientists, which I want to share with you today. Most importantly, I hope to get you excited about GitHub Actions, and the promise it has for giving you new superpowers as a Data Scientist. Here are two projects I recently built with Actions that show off its potential: . fastpages . fastpages is an automated, open-source blogging platform with enhanced support for Jupyter notebooks. You save your notebooks, markdown, or Word docs into a directory on GitHub, and they automatically become blog posts. Read the announcement below: . Machine Learning Ops . Wouldn’t it be cool if you could invoke a chatbot natively on GitHub to test your machine learning models on the infrastructure of your choice (GPUs), log all the results, and give you a rich report back in a pull request so that everyone could see the results? You can with GitHub Actions! . Consider the below annotated screenshot of this Pull Request: . . A more in-depth explanation about the above project can be viewed in this video: . Using GitHub Actions for machine learning workflows is starting to catch on. Julien Chaumond, CTO of Hugging Face, says: . GitHub Actions are great because they let us do CI on GPUs (as most of our users use the library on GPUs not on CPUs), on our own infra! 1 . Additionally, you can host a GitHub Action for other people so others can use parts of your workflow without having to re-create your steps. I provide examples of this below. . A Gentle Introduction To GitHub Actions . What Are GitHub Actions? . GitHub Actions allow you to run arbitrary code in response to events. Events are activities that happen on GitHub such as: . Opening a pull request | Making an issue comment | Labeling an issue | Creating a new branch | … and many more | . When an event is created, the GitHub Actions context is hydrated with a payload containing metadata for that event. Below is an example of a payload that is received when an issue is created: . { &quot;action&quot;: &quot;created&quot;, &quot;issue&quot;: { &quot;id&quot;: 444500041, &quot;number&quot;: 1, &quot;title&quot;: &quot;Spelling error in the README file&quot;, &quot;user&quot;: { &quot;login&quot;: &quot;Codertocat&quot;, &quot;type&quot;: &quot;User&quot;, }, &quot;labels&quot;: [ { &quot;id&quot;: 1362934389, &quot;node_id&quot;: &quot;MDU6TGFiZWwxMzYyOTM0Mzg5&quot;, &quot;name&quot;: &quot;bug&quot;, } ], &quot;body&quot;: &quot;It looks like you accidently spelled &#39;commit&#39; with two &#39;t&#39;s.&quot; } . This functionality allows you to respond to various events on GitHub in an automated way. In addition to this payload, GitHub Actions also provide a plethora of variables and environment variables that afford easy to access metadata such as the username and the owner of the repo. Additionally, other people can package useful functionality into an Action that other people can inherit. For example, consider the below Action that helps you publish python packages to PyPi: . The Usage section describes how this Action can be used: . - name: Publish a Python distribution to PyPI uses: pypa/gh-action-pypi-publish@master with: user: __token__ password: ${{ secrets.pypi_password }} . This Action expects two inputs: user and a password. You will notice that the password is referencing a variable called secrets, which is a variable that contains an encrypted secret that you can upload to your GitHub repository. There are thousands of Actions (that are free) for a wide variety of tasks that can be discovered on the GitHub Marketplace. The ability to inherit ready-made Actions in your workflow allows you to accomplish complex tasks without implementing all of the logic yourself. Some useful Actions for those getting started are: . actions/checkout: Allows you to quickly clone the contents of your repository into your environment, which you often want to do. This does a number of other things such as automatically mount your repository’s files into downstream Docker containers. | mxschmitt/action-tmate: Proivdes a way to debug Actions interactively. This uses port forwarding to give you a terminal in the browser that is connected to your Actions runner. Be careful not to expose sensitive information if you use this. | actions/github-script: Gives you a pre-authenticated ocotokit.js client that allows you to interact with the GitHub API to accomplish almost any task on GitHub automatically. Only these endpoints are supported (for example, the secrets endpoint is not in that list). | . In addition to the aforementioned Actions, it is helpful to go peruse the official GitHub Actions docs before diving in. . Example: A fastpages Action Workflow . The best to way familiarize yourself with Actions is by studying examples. Let’s take a look at the Action workflow that automates the build of fastpages (the platform used to write this blog post). . Part 1: Define Workflow Triggers . blog, defined in ci.yaml. Like all Actions workflows, this is YAML file is located in the .github/workflows directory of the GitHub repo. . The top of this YAML file looks like this: . name: CI on: push: branches: - master pull_request: . This means that this workflow is triggered on either a push or pull request event. Furthermore, push events are filtered such that only pushes to the master branch will trigger the workflow, whereas all pull requests will trigger this workflow. It is important to note that pull requests opened from forks will have read-only access to the base repository and cannot access any secrets for security reasons. The reason for defining the workflow in this way is we wanted to trigger the same workflow to test pull requests as well as build and deploy the website when a PR is merged into master. This will be clarified as we step through the rest of the YAML file. . Part 2: Define Jobs . Next, we define jobs (there is only one in this workflow). Per the docs: . A workflow run is made up of one or more jobs. Jobs run in parallel by default. . jobs: build-site: if: ( github.event.commits[0].message != &#39;Initial commit&#39; ) || github.run_number &gt; 1 runs-on: ubuntu-latest steps: . The keyword build-site is the name of your job and you can name it whatever you want. In this case, we have a conditional if statement that dictates if this job should be run or not. We are trying to ensure that this workflow does not run when the first commit to a repo is made with the message ‘Initial commit’. The first variable in the if statement, github.event, contains a json payload of the event that triggered this workflow. When developing workflows, it is helpful to print this variable in order to inspect its structure, which you can accomplish with the following YAML: . - name: see payload run: | echo &quot;PAYLOAD: n${PAYLOAD} n&quot; env: PAYLOAD: ${{ toJSON(github.event) }} . Note: the above step is only for debugging and is not currently in the workflow. . toJson is a handy function that returns a pretty-printed JSON representation of the variable. The output is printed directly in the logs contained in the Actions tab of your repo. In this example, printing the payload for a push event will look like this (truncated for brevity): . { &quot;ref&quot;: &quot;refs/tags/simple-tag&quot;, &quot;before&quot;: &quot;6113728f27ae8c7b1a77c8d03f9ed6e0adf246&quot;, &quot;created&quot;: false, &quot;deleted&quot;: true, &quot;forced&quot;: false, &quot;base_ref&quot;: null, &quot;commits&quot;: [ { &quot;message&quot;: &quot;updated README.md&quot;, &quot;author&quot;: &quot;hamelsmu&quot; }, ], &quot;head_commit&quot;: null, } . Therefore, the variable github.event.commits[0].message will retrieve the first commit message in the array of commits. Since we are looking for situations where there is only one commit, this logic suffices. The second variable in the if statement, github.run_number is a special variable in Actions which: . [is a] unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow’s first run, and increments with each new run. This number does not change if you re-run the workflow run. . Therefore, the if statement introduced above: . if: ( github.event.commits[0].message != &#39;Initial commit&#39; ) || github.run_number &gt; 1 . Allows the workflow to run when the commit message is “Initial commit” as long as it is not the first commit. ( || is a logical or operator). . Finally, the line runs-on: ubuntu-latest specifies the host operating system that your workflows will run in. . Part 3: Define Steps . Per the docs: . A job contains a sequence of tasks called steps. Steps can run commands, run setup tasks, or run an Action in your repository, a public repository, or an Action published in a Docker registry. Not all steps run Actions, but all Actions run as a step. Each step runs in its own process in the runner environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps. GitHub provides built-in steps to set up and complete a job. . Below are the first two steps in our workflow: . - name: Copy Repository Contents uses: actions/checkout@master with: persist-credentials: false - name: convert notebooks and word docs to posts uses: ./_action_files . The first step creates a copy of your repository in the Actions file system, with the help of the utility action/checkout. This utility only fetches the last commit by default and saves files into a directory (whose path is stored in the environment variable GITHUB_WORKSPACE that is accessible by subsequent steps in your job. The second step runs the fastai/fastpages Action, which converts notebooks and word documents to blog posts automatically. In this case, the syntax: . uses: ./_action_files . is a special case where the pre-made GitHub Action we want to run happens to be defined in the same repo that runs this workflow. This syntax allows us to test changes to this pre-made Action when evaluating PRs by referencing the directory in the current repository that defines that pre-made Action. Note: Building pre-made Actions is beyond the scope of this tutorial. . The next three steps in our workflow are defined below: . - name: setup directories for Jekyll build run: | rm -rf _site sudo chmod -R 777 . - name: Jekyll build uses: docker://hamelsmu/fastpages-jekyll with: args: bash -c &quot;gem install bundler &amp;&amp; jekyll build -V&quot; env: JEKYLL_ENV: &#39;production&#39; - name: copy CNAME file into _site if CNAME exists run: | sudo chmod -R 777 _site/ cp CNAME _site/ 2&gt;/dev/null || : . The step named setup directories for Jekyll build executes shell commands that remove the _site folder in order to get rid of stale files related to the page we want to build, as well as grant permissions to all the files in our repo to subsequent steps. . The step named Jekyll build executes a docker container hosted by the Jekyll community on Dockerhub called jekyll/jekyll. For those not familiar with Docker, see this tutorial. The name of this container is called hamelsmu/fastpages-jekyll because I’m adding some additional dependencies to jekyll/jekyll and hosting those on my DockerHub account for faster build times2. The args parameter allows you to execute arbitrary commands with the Docker container by overriding the CMD instruction in the Dockerfile. We use this Docker container hosted on Dockerhub so we don’t have to deal with installing and configuring all of the complicated dependencies for Jekyll. The files from our repo are already available in the Actions runtime due to the first step in this workflow, and are mounted into this Docker container automatically for us. In this case, we are running the command jekyll build, which builds our website and places relevant assets them into the _site folder. For more information about Jekyll, read the official docs. Finally, the env parameter allows me to pass an environment variable into the Docker container. . The final command above copies a CNAME file into the _site folder, which we need for the custom domain https://fastpages.fast.ai. Setting up custom domains are outside the scope of this article. . The final step in our workflow is defined below: . - name: Deploy if: github.event_name == &#39;push&#39; uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.SSH_DEPLOY_KEY }} publish_dir: ./_site . The statement . if: github.event_name == &#39;push&#39; . uses the variable github.event_name to ensure this step only runs when a push event ( in this case only pushes to the master branch trigger this workflow) occur. . This step deploys the fastpages website by copying the contents of the _site folder to the root of the gh-pages branch, which GitHub Pages uses for hosting. This step uses the peaceiris/actions-gh-pages Action, pinned at version 3. Their README describes various options and inputs for this Action. . Conclusion . We hope that this has shed some light on how we use GitHub Actions to automate fastpages. While we only covered one workflow above, we hope this provides enough intuition to understand the other workflows in fastpages. We have only scratched the surface of GitHub Actions in this blog post, but we provide other materials below for those who want to dive in deeper. We have not covered how to host an Action for other people, but you can start with these docs to learn more. . Still confused about how GitHub Actions could be used for Data Science? Here are some ideas of things you can build: . Jupyter Widgets that trigger GitHub Actions to perform various tasks on GitHub via the repository dispatch event | Integration with Pachyderm for data versioning. | Integration with your favorite cloud machine learning services, such Sagemaker, Azure ML or GCP’s AI Platform. | . Related Materials . GitHub Actions official documentation | Hello world Docker Action: A template to demonstrate how to build a Docker Action for other people to use. | Awesome Actions: A curated list of interesting GitHub Actions by topic. | A tutorial on Docker for Data Scientists. | . Getting In Touch . Please feel free to get in touch with us on Twitter: . Hamel Husain @HamelHusain | Jeremy Howard @jeremyphoward | . . Footnotes . You can see some of Hugging Face’s Actions workflows for machine learning on GitHub &#8617; . | These additional dependencies are defined here, which uses the “jekyll build” command to add ruby dedpendencies from the Gemfile located at the root of the repo. Additionally, this docker image is built by another Action workflow defined here. &#8617; . |",
            "url": "/vvboard/actions/markdown/2020/03/06/fastpages-actions.html",
            "relUrl": "/actions/markdown/2020/03/06/fastpages-actions.html",
            "date": " • Mar 6, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides has for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Feautures . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "/vvboard/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Footnotes . This is the footnote. &#8617; . |",
            "url": "/vvboard/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "简介",
          "content": "简介 . 虚谷号是一款开源的迷你电脑，集成了高性能处理器和通用单片机芯片，内置多种通信和扩展接口，既可以作为一台完整的电脑使用，也可以作为一个微型的可编程智能终端，为人工智能教育而设计。 . 虚谷号的项目合作伙伴为深圳希科普。 . 链接 . 使用文档 . - 开源地址：[Github](https://github.com/vvlink/vvBoard-docs) - 在线阅读：[readthedocs](https://vvboard.readthedocs.io/zh_CN/latest/) . 在线社区 . - 在线购买：[微信商城](http://vvboard.net.cn/plus/view.php?aid=25)[DF商城](https://www.dfrobot.com.cn/search.php?keywords=%E8%99%9A%E8%B0%B7%E5%8F%B7) - 固件下载：[希科普](http://www.vvboard.com.cn/) ### 更多资源 - .",
          "url": "/vvboard/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "历程",
          "content": "虚谷号大事记 . 虚谷号从想法萌发到正式发布，经历了很多曲折。感谢希科普的工程师和众多教育创客的共同努力。 . 虚谷号的重要培训记录 . 北京创学院的“虚谷号”培训 | 第七届STEAM教育大会的“虚谷号”培训 | 福建省宁德地区教师的培训 | . 虚谷号的开发纪要 . 2018年1月20日，希科普启动预研 | 2018年2月22日，项目启动 | 2018年3月17日，虚谷工作组成立 | 2018年3月17日，明确硬件定义 | 2018年3月28日，虚谷V1.0原理图完成 | 2018年3月30日，虚谷板背面标识确认 | 2018年4月5日，虚谷V1.0 PCB Layout完成 | 2018年4月15日，首师大樊磊教授到深圳，开启虚谷示教板V1.0 | 2018年4月19日，虚谷号logo确认 | 2018年4月21日，虚谷号示教板V1.0确认 | 2018年4月21日，虚谷号示教板V2.0开始 | 2018年4月22日，虚谷号示教板软件确认 | 2018年4月28日，虚谷号V1.0完成 | 2018年5月1日，虚谷号V2.0启动 | 2018年6月5日，虚谷号V2.0PCB Layout完成 | 2018年6月11日，虚谷号示教板V2.0完成 | 2018年6月24日，华东师大任友群教授参观希科普，确认虚谷号示教板可以帮助信息技术教学工作 | 2018年6月25日，虚谷号英文名称确认 | 2018年6月29日，虚谷号V2.0完成 | 2018年7月9日，虚谷号V3.0启动 | 2018年7月9日，虚谷号示教板V3.0启动 | 2018年7月20日，虚谷号示教板V3.0原理图完成 | 2018年7月26日，虚谷号软件确认 | 2018年7月28日，虚谷号示教板V3.0PCB Layout完成 | 2018年7月31日，虚谷号V3.0原理图完成 | 2018年8月2日，虚谷号示教板V3.0完成 | 2018年8月5日，虚谷号V3.0PCB Layout完成 | 2018年8月10日，虚谷号V3.0完成 | 2018年12.30，虚谷号官方网站正式开通 | 2018年12月23-24日，虚谷号在英国BETT展会上展示 | 2019年1月26-27日，虚谷号在中泰创客教育文化节上展示并做了三期的工作坊 | 2019年3月8日，虚谷号亮相联合国教科文组织“移动学习周”活动的战略实验室环节 | 2019年6月，虚谷计划组委会联合猫友汇征集国内测评专家，进行大规模测试 | 2019年7月，虚谷号在第七届STEAM教育大会上做培训工作坊 | 2019年8月，虚谷号开始线上销售（微信商城） | 2019年9月，虚谷号文档上线 | 2019年11月，虚谷号在DF商城上线 | .",
          "url": "/vvboard/log/",
          "relUrl": "/log/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "资源",
          "content": "资源链接 . 使用文档 . - 开源地址：[Github](https://github.com/vvlink/vvBoard-docs) - 在线阅读：[readthedocs](https://vvboard.readthedocs.io/zh_CN/latest/) . 在线社区 . - 在线购买：[微信商城](http://vvboard.net.cn/plus/view.php?aid=25)[DF商城](https://www.dfrobot.com.cn/search.php?keywords=%E8%99%9A%E8%B0%B7%E5%8F%B7) - 固件下载：[希科普](http://www.vvboard.com.cn/) ### 更多资源 - .",
          "url": "/vvboard/resource/",
          "relUrl": "/resource/",
          "date": ""
      }
      
  

  
  

  
      ,"page6": {
          "title": "查找",
          "content": "",
          "url": "/vvboard/search/",
          "relUrl": "/search/",
          "date": ""
      }
      
  

  
  

  
      ,"page8": {
          "title": "故事",
          "content": "虚谷号的故事 . 自从“虚谷号”的消息发布以来，常常有熟悉的创客老师问有关“虚谷号”的细节。他们很好奇，我们为什么会设计一款新的开源硬件。是受到“中兴事件”的刺激而想要有一款中国芯的开源硬件，还是在各种融资的好消息刺激下，也要做款产品赚点钱？当然，他们更多是关心这一开源硬件具有怎样的特点，是否更加适用于中小学，帮助他们能够更好地开展创客教育。 . 如果认真追溯下去，设计虚谷号的理由也许很复杂，也许真的关乎爱国，关乎情怀。参与“虚谷计划”的每一个成员，背后都有一个关乎教育关乎技术教育的故事。但要归纳一个最核心的理由却是简简单单的一句话： . 我们找不到想要的开源硬件。 . 我们的思考 . 2016年，普通高中信息技术教材开始编写。新教材的必修模块和选择性必修模块都有开源硬件方面的内容。因为新教材的编程语言选择了Python。在这种背景下，应该选择哪些开源硬件进入教材成为一道难题。 . 如果选择Arduino？Arduino的编程语言是C/C++，没有基于Python的IDE。鉴于高中生的学习能力，又不能使用Mixly或者ArduBlock之类的图形化编程环境。 . 如果选择树莓派？先不说树莓派算不算一款开源硬件，最重要的是用树莓派没法上课！如果用树莓派来上课，机房里要准备几个屏幕？几套键盘？无论是国内还是国外，在大班教学中用树莓派几乎不可见。而高中的信息技术教学是大班上课的。 . 那能不能选择micro:bit？不，micro:bit的性能实在太弱了。说是支持MicroPython，其实是阉割的MicroPython。只要写几句和字符处理相关的功能，板子就会死机。还不支持无线网络（Wi-Fi），扩展功能极其有限，非常鸡肋。小学生用了入门挺好，高中实在不能使用。 . 我们的需求 . 我们想要怎样的开源硬件？那就是入门要简单，扩展要方便，就如Python语言一样，适合非专业的人使用，也能写出非常复杂的如机器学习方面的代码。Arduino再好，它毕竟不是为教育而设计。micro:bit再好，只能在入门时玩玩。树莓派再好，也只能适合那些玩Linux的高手。 . 盘点当前的开源硬件，micro:bit、Arduino和树莓派三者之间无法形成一个循序渐进的学习体系。micro:bit和Arduino，几乎是完全不同的体系，Arduino和树莓派，也不是一个知识体系。当你试图考虑中小学的开源硬件学习路径的时候，现有的产品就存在很大的问题。 . 决心重新自己设计一块教学用开源硬件想法，则是在2017年11月的台北makerFaire上的两岸教育创客之间的一番讨论。中国拥有全球最好的电子加工产业，在开源硬件方面已经有很多年的积累。DFRobot和Seeed Studio在开源硬件销售方面全球排名前五，他们生产的开源硬件和周边模块销往世界各地。厚积薄发，是时候开始设计中国的开源硬件了。 . 我们的行动 . 创意当实现！ . 一开始，我们给这一块开源硬件板子取名为“虚谷”，其寓意是：虚怀若谷，兼容并蓄，继往开来。“虚谷”要继承Arduino、树莓派、micro:bit等开源硬件的优点，而不是另起炉灶重新造一个“轮子”，用一句话去描述开发目标： . 技术门槛如micro:bit一样低，支持Python和网络，支持虚拟磁盘烧录，性能和成本优于树莓派，能够兼容大部分Arduino项目。 . 一个月后，在北京一个以“人工智能教育”为主题的研讨会上，“虚谷”引起了深圳希科普公司CEO刘军的关注。2018年初，他组了一个团队开始研发。随后，来自全国各地的教育创客先后加入，需求越来越清晰。这块板子的最终名称确定为“虚谷号”，英文名为vvBoard。 . 2018年5月4日——第一块虚谷号（测试版）正式亮相！ . . 2019年6月，虚谷号开始量产，并通过猫友汇邀请全国的信息技术教师、教育创客共同测试，获得好评。 . .",
          "url": "/vvboard/story/",
          "relUrl": "/story/",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "标签",
          "content": "{% if site.categories.size &gt; 0 %} . 目录 . {% assign categories = “” | split:”” %} {% for c in site.categories %} {% assign categories = categories | push: c[0] %} {% endfor %} {% assign categories = categories | sort_natural %} . {% for category in categories %} {{ category }} | {% endfor %} . {% for category in categories %} &lt;h3 id =&quot;{{ category }}&quot;&gt;&lt;/i&gt; {{ category }}&lt;/h3&gt; {% for post in site.categories[category] %} {%- assign date_format = site.minima.date_format | default: “%b %-d, %Y” -%} &lt;article class=&quot;archive-item&quot;&gt; &lt;p class=&quot;post-meta post-meta-title&quot;&gt;{{post.title}} • {{ post.date | date: date_format }}&lt;/p&gt; &lt;/article&gt; {% endfor %} {% endfor %} . {% endif %} .",
          "url": "/vvboard/categories/",
          "relUrl": "/categories/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "/vvboard/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}